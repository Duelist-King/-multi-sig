{"version":3,"sources":["WalletConnect/WalletConnect.js","App.js","reportWebVitals.js","index.js"],"names":["walletConnector","WalletConnect","bridge","qrcodeModal","QRCodeModal","getNetwork","chainId","getProvider","network","ethers","providers","JsonRpcProvider","getToken","symbol","tokenList","filter","e","blockchain","pop","App","props","state","connected","account","token","wallet","receiver","amount","provider","proposals","on","error","payload","params","accounts","setState","this","event","target","value","a","test","alert","multiSign","Contract","abiMultiSign","erc20","address","abiErc20","result","interface","encodeFunctionData","delegate","expired","executed","vote","data","BigNumber","from","mul","pow","decimal","sendTx","proposalIndex","total","toNumber","stop","i","proposalDetail","decodeFunctionData","recipient","push","index","Date","toLocaleString","div","tokenSymbol","killSession","createSession","parseInt","Number","isNaN","sendTransaction","to","then","console","log","catch","Grid","container","spacing","item","xs","Typography","Select","defaultValue","onChange","selectWalletHandler","bind","MenuItem","selectNetworkHandler","disabled","Button","variant","onClick","buttonConnectHandler","color","TextField","label","fullWidth","textReceiverHandler","trim","textAmountHandler","selectTokenHandler","map","buttonCreateProposalHandler","buttonReloadProposalHandler","Card","style","CardContent","fullwidth","sx","fontSize","gutterBottom","Link","href","CardActions","buttonPositiveHandler","buttonNegativeHandler","buttonExecuteHandler","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1914db9b.chunk.js","sourcesContent":["import WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";;\n\nexport const walletConnector = new WalletConnect({\n    bridge: \"https://bridge.walletconnect.org\", // Required\n    qrcodeModal: QRCodeModal,\n});","import tokenList from './abi/token-list.json'\nimport React from \"react\";\nimport { Grid, MenuItem, Button, Select, Typography, TextField, Card, CardContent, CardActions, Link } from \"@mui/material\";\nimport { ethers } from 'ethers';\nimport { abi as abiErc20 } from './abi/ERC20.json';\nimport { abi as abiMultiSign } from './abi/MultiSig.json';\nimport { walletConnector } from './WalletConnect/WalletConnect';\n\nfunction getChainId(network) {\n  switch (network) {\n    case 'binance':\n      return 56;\n    default:\n      return 1;\n  }\n}\n\nfunction getNetwork(chainId) {\n  switch (chainId) {\n    case 56:\n      return 'binance';\n    default:\n      return 'ethereum';\n  }\n}\n\n\n\nfunction getProvider(network) {\n  return new ethers.providers.JsonRpcProvider(network === 'binance'\n    ? 'https://bsc-dataseed.binance.org/'\n    : 'https://mainnet.infura.io/v3/b8bb7a40c9f84aa0aa57ec093318d856'\n  )\n}\n\nfunction getToken(network, symbol) {\n  return tokenList.filter(e => e.blockchain === network && e.symbol === symbol).pop();\n}\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false,\n      account: null,\n      token: getToken('ethereum', 'USDT'),\n      wallet: '0xDC9bD464Ab6cf1f8eB0F1a5D22d859e1FC10b65D',\n      network: 'ethereum',\n      receiver: '',\n      amount: '',\n      provider: null,\n      proposals: [],\n    };\n  }\n\n  componentDidMount() {\n    // Subscribe to connection events\n    walletConnector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      // Get provided accounts and chainId\n      const { accounts, chainId } = payload.params[0];\n      const network = getNetwork(chainId);\n      this.setState({\n        connected: true,\n        account: accounts[0],\n        network,\n        token: getToken(network, 'USDT'),\n        provider: getProvider(network)\n      });\n    });\n\n    // Subscribe to disconnect events\n    walletConnector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      this.setState({\n        connected: false,\n        account: ''\n      })\n    });\n\n    const network = getNetwork(walletConnector.chainId);\n    const token = getToken(network, 'USDT');\n    this.setState({\n      connected: walletConnector.connected,\n      account: walletConnector.connected ? walletConnector.accounts[0] : null,\n      network,\n      token,\n      provider: getProvider(network)\n    });\n\n  }\n\n  selectTokenHandler(event) {\n    this.setState({\n      token: getToken(this.state.network, event.target.value),\n    });\n  }\n\n  textReceiverHandler(event) {\n    this.setState({\n      receiver: event.target.value,\n    });\n  }\n\n  async buttonCreateProposalHandler() {\n    const { token, receiver, wallet, amount } = this.state;\n    if (!/0x[0-9a-f]{40}/ig.test(receiver)) {\n      alert('Invalid receiver address');\n      return;\n    }\n\n    const multiSign = new ethers.Contract(wallet, abiMultiSign);\n    const erc20 = new ethers.Contract(token.address, abiErc20);\n\n    const result = multiSign.interface.encodeFunctionData('createProposal', [{\n      delegate: false,\n      expired: 0,\n      executed: false,\n      vote: 0,\n      target: token.address,\n      value: 0,\n      data: erc20.interface.encodeFunctionData('transfer', [\n        receiver,\n        ethers.BigNumber.from(amount).mul(ethers.BigNumber.from(10).pow(token.decimal))\n      ]),\n    }]);\n    this.sendTx(result);\n  }\n\n  async buttonReloadProposalHandler() {\n    const { token, provider, wallet } = this.state;\n    const multiSign = new ethers.Contract(wallet, abiMultiSign, provider);\n    const erc20 = new ethers.Contract(token.address, abiErc20, provider);\n    const total = (await multiSign.proposalIndex()).toNumber();\n    const stop = (total - 10 > 0) ? total - 10 : 0;\n    const proposals = [];\n    for (let i = total; i > stop; i -= 1) {\n      const {\n        vote,\n        value,\n        target,\n        expired,\n        executed,\n        delegate,\n        data\n      } = await multiSign.proposalDetail(i);\n      const { amount, recipient } = erc20.interface.decodeFunctionData('transfer', data);\n      proposals.push({\n        index: i,\n        expired: new Date(expired.toNumber() * 1000).toLocaleString(),\n        vote: vote.toNumber(),\n        amount: amount.div(ethers.BigNumber.from(10).pow(token.decimal)).toNumber().toLocaleString(),\n        tokenSymbol: token.symbol,\n        recipient,\n        executed,\n        delegate,\n        value: value.toNumber(),\n        target\n      });\n\n    }\n    this.setState({ proposals });\n  }\n\n  buttonConnectHandler() {\n    // Check if connection is already established\n    if (!walletConnector.connected) {\n      // create new session\n      walletConnector.createSession({ chainId: getChainId(this.state.network) });\n    } else {\n      walletConnector.killSession();\n    }\n  }\n\n  textAmountHandler(event) {\n    const amount = parseInt(event.target.value, 10);\n    this.setState({\n      amount: Number.isNaN(amount) ? '' : amount,\n    });\n  }\n\n  selectNetworkHandler(event) {\n    this.setState({\n      network: event.target.value,\n    });\n  }\n\n  selectWalletHandler(event) {\n    this.setState({\n      wallet: event.target.value,\n    });\n  }\n\n  buttonPositiveHandler(event) {\n    const multiSign = new ethers.Contract(this.state.wallet, abiMultiSign);\n    const result = multiSign.interface.encodeFunctionData('voteProposal', [parseInt(event.target.value, 10), true]);\n    this.sendTx(result);\n  }\n\n  buttonNegativeHandler(event) {\n    const multiSign = new ethers.Contract(this.state.wallet, abiMultiSign);\n    const result = multiSign.interface.encodeFunctionData('voteProposal', [parseInt(event.target.value, 10), false]);\n    this.sendTx(result);\n  }\n\n  buttonExecuteHandler(event) {\n    const multiSign = new ethers.Contract(this.state.wallet, abiMultiSign);\n    const result = multiSign.interface.encodeFunctionData('execute', [parseInt(event.target.value, 10)]);\n    this.sendTx(result);\n  }\n\n  sendTx(data) {\n    walletConnector\n      .sendTransaction({\n        from: this.state.account,\n        to: this.state.wallet,\n        value: 0,\n        data,\n      })\n      .then((result) => {\n        // Returns transaction id (hash)\n        console.log(result);\n      })\n      .catch((error) => {\n        // Error returned when rejected\n        console.error(error);\n      });\n  }\n\n  render() {\n    const { connected, account, receiver, proposals, network, amount } = this.state;\n    return (\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <Typography>{connected ? `Connected wallet: ${account}` : 'Not connected'}</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <Select defaultValue=\"0xDC9bD464Ab6cf1f8eB0F1a5D22d859e1FC10b65D\" onChange={this.selectWalletHandler.bind(this)}>\n            <MenuItem value=\"0xDC9bD464Ab6cf1f8eB0F1a5D22d859e1FC10b65D\">0xDC9bD464Ab6cf1f8eB0F1a5D22d859e1FC10b65D</MenuItem>\n            <MenuItem value=\"0xcC527eb38F459882f0efFbAB8fe79B47716DE72F\">0xcC527eb38F459882f0efFbAB8fe79B47716DE72F</MenuItem>\n          </Select>\n        </Grid>\n        <Grid item xs={2}>\n          <Select defaultValue=\"ethereum\" value={network} onChange={this.selectNetworkHandler.bind(this)} disabled={connected}>\n            <MenuItem value=\"ethereum\">Ethereum</MenuItem>\n            <MenuItem value=\"binance\">Binance Smart Chain</MenuItem>\n          </Select>\n        </Grid>\n        <Grid item xs={2}>\n          <Button variant=\"contained\" onClick={this.buttonConnectHandler.bind(this)} color={connected ? \"error\" : \"success\"}>{connected ? 'Disconnect' : 'Connect'}</Button>\n        </Grid>\n        <Grid item xs={4}>\n          <Typography>Receiver</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <TextField variant=\"standard\" label=\"Receiver's Address\" fullWidth={true} onChange={this.textReceiverHandler.bind(this)} value={receiver.trim()} />\n        </Grid>\n        <Grid item xs={4}></Grid>\n        <Grid item xs={4}>\n          <Typography>Token amount</Typography>\n        </Grid>\n        <Grid item xs={4}>\n          <TextField variant=\"standard\" label=\"Amount\" fullWidth={true} onChange={this.textAmountHandler.bind(this)} value={amount} />\n        </Grid>\n        <Grid item xs={4}>\n          <Select onChange={this.selectTokenHandler.bind(this)} defaultValue={typeof tokenList[0] !== 'undefined' ? tokenList[0].symbol || 'USDT' : 'USDT'}>\n            {tokenList.map((e, i) => <MenuItem key={`token-list-${i}`} value={e.symbol}>{e.symbol}</MenuItem>)}\n          </Select>\n        </Grid>\n        <Grid item xs={4}>\n          <Button variant=\"outlined\" onClick={this.buttonCreateProposalHandler.bind(this)}>Create a new proposal</Button>\n        </Grid>\n        <Grid item xs={4}>\n          <Button variant=\"outlined\" onClick={this.buttonReloadProposalHandler.bind(this)}>Reload Proposal List</Button>\n        </Grid>\n        <Grid item xs={12}>\n          {proposals.map((e, i) => (\n            <Card variant=\"outlined\" key={`key-proposal-${i}`} style={{ \"marginTop\": \"10px\" }}>\n              <CardContent fullwidth=\"true\">\n                <Typography variant=\"h5\">#{e.index}</Typography>\n                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n                  Target token: <Link target=\"_blank\" href={`${network === 'binance' ? 'https://bscscan.com/address' : 'https://etherscan.io/address/'}${e.target}`}>{e.target}</Link> ({network})\n                </Typography>\n                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n                  Transfer: <Link target=\"_blank\" href={`${network === 'binance' ? 'https://bscscan.com/address' : 'https://etherscan.io/address/'}${e.recipient}`}>{e.recipient}</Link>\n                </Typography>\n                <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n                  Amount: {e.amount} {e.tokenSymbol}\n                </Typography>\n              </CardContent>\n              {!e.executed &&\n                <CardActions>\n                  <Button variant=\"contained\" onClick={this.buttonPositiveHandler.bind(this)} color=\"success\" value={e.index}>+1</Button>\n                  <Button variant=\"contained\" onClick={this.buttonNegativeHandler.bind(this)} color=\"error\" value={e.index}>-1</Button>\n                  <Button variant=\"contained\" onClick={this.buttonExecuteHandler.bind(this)} value={e.index}>Execute</Button>\n                </CardActions>\n              }\n            </Card>\n          )\n          )}\n        </Grid>\n      </Grid >\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}